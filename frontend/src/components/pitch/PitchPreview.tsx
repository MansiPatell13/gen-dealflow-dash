import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Separator } from '@/components/ui/separator';
import { 
  FileText, 
  Eye, 
  Download, 
  Share2, 
  Printer,
  CheckCircle,
  Clock,
  AlertCircle,
  Info,
  BookOpen,
  Target,
  DollarSign,
  Calendar
} from 'lucide-react';
import { cn } from '@/lib/utils';

interface SolutionPitch {
  id: string;
  title: string;
  content: string;
  status: 'draft' | 'submitted' | 'approved' | 'rejected';
  createdAt: string;
  updatedAt: string;
  caseStudyIds: string[];
  version: number;
}

interface PitchPreviewProps {
  pitch: SolutionPitch;
  onEdit?: () => void;
  onApprove?: () => void;
  onReject?: () => void;
  onDownload?: () => void;
  onShare?: () => void;
  className?: string;
}

export const PitchPreview: React.FC<PitchPreviewProps> = ({
  pitch,
  onEdit,
  onApprove,
  onReject,
  onDownload,
  onShare,
  className
}) => {
  const [activeTab, setActiveTab] = useState('formatted');

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'approved': return <CheckCircle className="h-4 w-4" />;
      case 'submitted': return <Clock className="h-4 w-4" />;
      case 'rejected': return <AlertCircle className="h-4 w-4" />;
      default: return <Info className="h-4 w-4" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'approved': return 'text-green-600 bg-green-100';
      case 'submitted': return 'text-blue-600 bg-blue-100';
      case 'rejected': return 'text-red-600 bg-red-100';
      default: return 'text-yellow-600 bg-yellow-100';
    }
  };

  const formatContent = (content: string) => {
    return content.split('\n\n').map((section, index) => {
      const lines = section.split('\n');
      const title = lines[0];
      const body = lines.slice(1).join('\n');

      return (
        <div key={index} className="mb-6">
          <h3 className="text-lg font-semibold text-primary mb-3">{title}</h3>
          <div className="prose prose-sm max-w-none">
            {body.split('\n').map((line, lineIndex) => {
              if (line.startsWith('- ')) {
                return (
                  <div key={lineIndex} className="flex items-start gap-2 mb-1">
                    <span className="text-primary mt-1">•</span>
                    <span>{line.substring(2)}</span>
                  </div>
                );
              }
              if (line.startsWith('**') && line.endsWith('**')) {
                return (
                  <div key={lineIndex} className="font-semibold mb-2">
                    {line.substring(2, line.length - 2)}
                  </div>
                );
              }
              return (
                <p key={lineIndex} className="mb-2">
                  {line}
                </p>
              );
            })}
          </div>
        </div>
      );
    });
  };

  const renderFormattedView = () => (
    <div className="space-y-6">
      <div className="text-center border-b pb-6">
        <h1 className="text-3xl font-bold text-primary mb-2">{pitch.title}</h1>
        <div className="flex items-center justify-center gap-4 text-sm text-muted-foreground">
          <span>Version {pitch.version}</span>
          <span>•</span>
          <span>Generated {new Date(pitch.createdAt).toLocaleDateString()}</span>
        </div>
      </div>

      <div className="space-y-6">
        {formatContent(pitch.content)}
      </div>

      <Separator />

      <div className="text-center text-sm text-muted-foreground">
        <p>Generated by PitchForge AI</p>
        <p>For more information, contact our team</p>
      </div>
    </div>
  );

  const renderRawView = () => (
    <div className="space-y-4">
      <div className="bg-muted p-4 rounded-md">
        <h3 className="font-semibold mb-2">Pitch Metadata</h3>
        <div className="grid grid-cols-2 gap-4 text-sm">
          <div>
            <strong>ID:</strong> {pitch.id}
          </div>
          <div>
            <strong>Version:</strong> {pitch.version}
          </div>
          <div>
            <strong>Status:</strong> {pitch.status}
          </div>
          <div>
            <strong>Created:</strong> {new Date(pitch.createdAt).toLocaleString()}
          </div>
          <div>
            <strong>Updated:</strong> {new Date(pitch.updatedAt).toLocaleString()}
          </div>
          <div>
            <strong>Case Studies:</strong> {pitch.caseStudyIds.length}
          </div>
        </div>
      </div>

      <div>
        <h3 className="font-semibold mb-2">Raw Content</h3>
        <div className="bg-muted p-4 rounded-md font-mono text-sm whitespace-pre-wrap max-h-96 overflow-y-auto">
          {pitch.content}
        </div>
      </div>
    </div>
  );

  const renderPrintView = () => (
    <div className="space-y-6 print:space-y-4">
      <div className="text-center border-b pb-6 print:border-b-2">
        <h1 className="text-3xl font-bold text-primary mb-2">{pitch.title}</h1>
        <div className="flex items-center justify-center gap-4 text-sm text-muted-foreground">
          <span>Version {pitch.version}</span>
          <span>•</span>
          <span>Generated {new Date(pitch.createdAt).toLocaleDateString()}</span>
        </div>
      </div>

      <div className="space-y-6 print:space-y-4">
        {formatContent(pitch.content)}
      </div>

      <Separator className="print:border-t-2" />

      <div className="text-center text-sm text-muted-foreground print:text-xs">
        <p>Generated by PitchForge AI</p>
        <p>For more information, contact our team</p>
      </div>
    </div>
  );

  return (
    <div className={cn("space-y-6", className)}>
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Pitch Preview</h2>
          <p className="text-muted-foreground">
            Review and format your generated solution pitch
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Badge variant="outline" className={cn("flex items-center gap-1", getStatusColor(pitch.status))}>
            {getStatusIcon(pitch.status)}
            {pitch.status}
          </Badge>
          <Badge variant="secondary" className="flex items-center gap-1">
            <BookOpen className="h-3 w-3" />
            v{pitch.version}
          </Badge>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList>
          <TabsTrigger value="formatted">Formatted View</TabsTrigger>
          <TabsTrigger value="raw">Raw Content</TabsTrigger>
          <TabsTrigger value="print">Print View</TabsTrigger>
        </TabsList>

        <TabsContent value="formatted">
          <Card>
            <CardContent className="p-6">
              {renderFormattedView()}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="raw">
          <Card>
            <CardContent className="p-6">
              {renderRawView()}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="print">
          <Card className="print:shadow-none print:border-0">
            <CardContent className="p-6 print:p-0">
              {renderPrintView()}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      <div className="flex justify-between items-center pt-4 border-t">
        <div className="flex items-center gap-2 text-sm text-muted-foreground">
          <Calendar className="h-4 w-4" />
          <span>Last updated: {new Date(pitch.updatedAt).toLocaleString()}</span>
        </div>

        <div className="flex gap-2">
          {onEdit && (
            <Button variant="outline" size="sm" onClick={onEdit}>
              <Eye className="h-4 w-4 mr-2" />
              Edit Pitch
            </Button>
          )}
          {onDownload && (
            <Button variant="outline" size="sm" onClick={onDownload}>
              <Download className="h-4 w-4 mr-2" />
              Download
            </Button>
          )}
          {onShare && (
            <Button variant="outline" size="sm" onClick={onShare}>
              <Share2 className="h-4 w-4 mr-2" />
              Share
            </Button>
          )}
          <Button 
            variant="outline" 
            size="sm" 
            onClick={() => window.print()}
          >
            <Printer className="h-4 w-4 mr-2" />
            Print
          </Button>
        </div>
      </div>

      {pitch.status === 'draft' && (
        <Card>
          <CardHeader>
            <CardTitle className="text-lg">Pitch Actions</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex gap-2">
              {onApprove && (
                <Button onClick={onApprove} className="flex items-center gap-2">
                  <CheckCircle className="h-4 w-4" />
                  Approve Pitch
                </Button>
              )}
              {onReject && (
                <Button variant="destructive" onClick={onReject} className="flex items-center gap-2">
                  <AlertCircle className="h-4 w-4" />
                  Reject Pitch
                </Button>
              )}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}; 